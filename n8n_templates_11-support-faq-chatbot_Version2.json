{
  "name": "11 - Support FAQ Chatbot (KB + LLM + Optional CRM Handoff)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "support/faq",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "1",
      "name": "Webhook - FAQ Question",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-1080, 20]
    },
    {
      "parameters": {
        "assignments": {
          "mode": "auto",
          "assignments": [
            { "id": "question", "name": "question", "type": "string", "value": "={{$json.question || ''}}" },
            { "id": "language", "name": "language", "type": "string", "value": "={{$json.language || 'en'}}" },
            { "id": "sessionId", "name": "sessionId", "type": "string", "value": "={{$json.sessionId || ''}}" },
            { "id": "maxArticles", "name": "maxArticles", "type": "number", "value": "={{$json.maxArticles || 3}}" },
            { "id": "handoffThreshold", "name": "handoffThreshold", "type": "number", "value": "={{$json.handoffThreshold || Number($env.HANDOFF_THRESHOLD || 0.5)}}" }
          ]
        }
      },
      "id": "2",
      "name": "Normalize",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-860, 20]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            { "value1": "={{$env.KB_SEARCH_URL || ''}}", "operation": "isEmpty" }
          ]
        }
      },
      "id": "3",
      "name": "IF KB Connected",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-640, 20]
    },
    {
      "parameters": {
        "url": "={{$env.KB_SEARCH_URL}}",
        "requestMethod": "GET",
        "jsonParameters": false,
        "sendBinaryData": false,
        "options": {},
        "queryParametersUi": {
          "parameter": [
            { "name": "q", "value": "={{$items(0).item.json.question}}" },
            { "name": "limit", "value": "={{$items(0).item.json.maxArticles}}" }
          ]
        },
        "headerParametersJson": "={{ $env.KB_API_KEY ? { 'Authorization': 'Bearer ' + $env.KB_API_KEY } : {} }}"
      },
      "id": "4",
      "name": "KB Search (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-640, 220]
    },
    {
      "parameters": {
        "functionCode": "const raw = $json;\nlet articles = [];\nif (Array.isArray(raw)) { articles = raw; }\nelse if (Array.isArray(raw.results)) { articles = raw.results; }\narticles = articles.slice(0, Number($items(0).item.json.maxArticles || 3));\nconst mapped = articles.map(a => ({ id: a.id || a.article_id || '', title: a.title || '', url: a.url || '', snippet: (a.content || a.snippet || '').slice(0, 500) }));\nreturn [{ kbResults: mapped }];"
      },
      "id": "5",
      "name": "Normalize KB Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-420, 220]
    },
    {
      "parameters": {
        "functionCode": "const kb = $json.kbResults || [];\nconst sys = `You are a support FAQ assistant. Use the provided knowledge base snippets. If confidence is low or answer requires account access, set handoff=true. Respond in ${$items(0).item.json.language}. Output JSON {answer, sources:[{id,title,url}], confidence:0..1, handoff:boolean}.`;\nconst context = kb.map((a,i)=>`[${i+1}] (${a.id}) ${a.title}\\n${a.snippet}\\nURL: ${a.url}`).join('\\n\\n');\nconst user = `Question: ${$items(0).item.json.question}\\n\\nKB Context:\\n${context}`;\nreturn [{ payload: { model: $env.OPENAI_MODEL || 'gpt-4o-mini', temperature: 0.2, response_format: {type:'json_object'}, messages: [ {role:'system', content: sys}, {role:'user', content: user} ] } }];"
      },
      "id": "6",
      "name": "Build LLM Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-420, 20]
    },
    {
      "parameters": {
        "url": "={{$env.OPENAI_BASE_URL || 'https://api.openai.com/v1/chat/completions'}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ { 'Authorization': 'Bearer ' + $env.OPENAI_API_KEY, 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ $json.payload }}"
      },
      "id": "7",
      "name": "OpenAI - Answer",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-180, 20]
    },
    {
      "parameters": {
        "functionCode": "let content = $json.choices?.[0]?.message?.content || '{}';\nlet parsed; try { parsed = JSON.parse(content); } catch(e) { parsed = { answer: 'Sorry, I could not find the answer. A human will assist shortly.', sources: [], confidence: 0, handoff: true }; }\nif (!Array.isArray(parsed.sources)) parsed.sources = [];\nconst threshold = Number($items(0).item.json.handoffThreshold || 0.5);\nconst handoff = !!parsed.handoff || Number(parsed.confidence || 0) < threshold;\nreturn [{ answer: parsed.answer || '', sources: parsed.sources, confidence: Number(parsed.confidence || 0), handoff }];"
      },
      "id": "8",
      "name": "Parse LLM JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [60, 20]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            { "value1": "={{$json.handoff}}", "operation": "isTrue" }
          ]
        }
      },
      "id": "9",
      "name": "IF Handoff",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [300, 20]
    },
    {
      "parameters": {
        "url": "={{$env.CRM_WEBHOOK_URL || ''}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ $env.CRM_WEBHOOK_URL ? { 'Content-Type': 'application/json' } : {} }}",
        "bodyParametersJson": "={{ $env.CRM_WEBHOOK_URL ? { type: 'support_handoff', sessionId: $items(0).item.json.sessionId, question: $items(0).item.json.question, confidence: $json.confidence, createdAt: new Date().toISOString() } : {} }}"
      },
      "id": "10",
      "name": "Create CRM Handoff (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [540, -80]
    },
    {
      "parameters": {
        "responseCode": 200,
        "responseBody": "={{ { answer: $json.answer, sources: $json.sources, confidence: $json.confidence, handoff: $json.handoff } }}"
      },
      "id": "11",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [540, 120]
    }
  ],
  "connections": {
    "Webhook - FAQ Question": { "main": [[{ "node": "Normalize", "type": "main", "index": 0 }]] },
    "Normalize": { "main": [[{ "node": "IF KB Connected", "type": "main", "index": 0 }]] },
    "IF KB Connected": {
      "main": [
        [{ "node": "Build LLM Payload", "type": "main", "index": 0 }],
        [{ "node": "KB Search (optional)", "type": "main", "index": 0 }]
      ]
    },
    "KB Search (optional)": { "main": [[{ "node": "Normalize KB Results", "type": "main", "index": 0 }]] },
    "Normalize KB Results": { "main": [[{ "node": "Build LLM Payload", "type": "main", "index": 0 }]] },
    "Build LLM Payload": { "main": [[{ "node": "OpenAI - Answer", "type": "main", "index": 0 }]] },
    "OpenAI - Answer": { "main": [[{ "node": "Parse LLM JSON", "type": "main", "index": 0 }]] },
    "Parse LLM JSON": { "main": [[{ "node": "IF Handoff", "type": "main", "index": 0 }]] },
    "IF Handoff": {
      "main": [
        [{ "node": "Create CRM Handoff (optional)", "type": "main", "index": 0 }],
        [{ "node": "Respond", "type": "main", "index": 0 }]
      ]
    },
    "Create CRM Handoff (optional)": { "main": [[{ "node": "Respond", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "id": "11-support-faq-chatbot"
}