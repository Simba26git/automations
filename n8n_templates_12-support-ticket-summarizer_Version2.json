{
  "name": "12 - Support Ticket Summarizer (LLM) + Optional Ticket Update",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "support/ticket/summarize",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "1",
      "name": "Webhook - Ticket",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-940, 20]
    },
    {
      "parameters": {
        "assignments": {
          "mode": "auto",
          "assignments": [
            { "id": "ticketId", "name": "ticketId", "type": "string", "value": "={{$json.ticketId || ''}}" },
            { "id": "title", "name": "title", "type": "string", "value": "={{$json.title || ''}}" },
            { "id": "body", "name": "body", "type": "string", "value": "={{$json.body || ''}}" },
            { "id": "comments", "name": "comments", "type": "json", "value": "={{$json.comments || []}}" },
            { "id": "language", "name": "language", "type": "string", "value": "={{$json.language || 'en'}}" }
          ]
        }
      },
      "id": "2",
      "name": "Normalize",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-700, 20]
    },
    {
      "parameters": {
        "functionCode": "const comments = Array.isArray($json.comments) ? $json.comments : [];\nconst text = `Title: ${$json.title}\\nBody: ${$json.body}\\nComments:\\n${comments.map((c,i)=>`[${i+1}] ${c}`).join('\\n')}`;\nconst sys = `Summarize the support ticket in ${$json.language}. Output JSON {summary, category, priority: one_of(low,medium,high,urgent), tags[], sentiment}.`;\nreturn [{ payload: { model: $env.OPENAI_MODEL || 'gpt-4o-mini', temperature: 0.2, response_format: {type:'json_object'}, messages: [ {role:'system', content: sys}, {role:'user', content: text} ] } }];"
      },
      "id": "3",
      "name": "Build LLM Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-460, 20]
    },
    {
      "parameters": {
        "url": "={{$env.OPENAI_BASE_URL || 'https://api.openai.com/v1/chat/completions'}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ { 'Authorization': 'Bearer ' + $env.OPENAI_API_KEY, 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ $json.payload }}"
      },
      "id": "4",
      "name": "OpenAI - Summarize Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-220, 20]
    },
    {
      "parameters": {
        "functionCode": "let content = $json.choices?.[0]?.message?.content || '{}';\nlet parsed; try { parsed = JSON.parse(content); } catch(e) { parsed = { summary:'', category:'general', priority:'medium', tags:[], sentiment:'neutral' }; }\nreturn [parsed];"
      },
      "id": "5",
      "name": "Parse JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [20, 20]
    },
    {
      "parameters": {
        "url": "={{$env.TICKETING_WEBHOOK_URL || ''}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { 'Content-Type': 'application/json' } : {} }}",
        "bodyParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { action: 'update_ticket_summary', ticketId: $items(0).item.json.ticketId, summary: $json.summary, category: $json.category, priority: $json.priority, tags: $json.tags, sentiment: $json.sentiment } : {} }}"
      },
      "id": "6",
      "name": "Update Ticket (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [260, -100]
    },
    {
      "parameters": {
        "responseCode": 200,
        "responseBody": "={{ $json }}"
      },
      "id": "7",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [260, 120]
    }
  ],
  "connections": {
    "Webhook - Ticket": { "main": [[{ "node": "Normalize", "type": "main", "index": 0 }]] },
    "Normalize": { "main": [[{ "node": "Build LLM Payload", "type": "main", "index": 0 }]] },
    "Build LLM Payload": { "main": [[{ "node": "OpenAI - Summarize Ticket", "type": "main", "index": 0 }]] },
    "OpenAI - Summarize Ticket": { "main": [[{ "node": "Parse JSON", "type": "main", "index": 0 }]] },
    "Parse JSON": {
      "main": [
        [{ "node": "Update Ticket (optional)", "type": "main", "index": 0 }],
        [{ "node": "Respond", "type": "main", "index": 0 }]
      ]
    },
    "Update Ticket (optional)": { "main": [[{ "node": "Respond", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "id": "12-support-ticket-summarizer"
}