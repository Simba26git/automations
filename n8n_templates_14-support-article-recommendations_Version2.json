{
  "name": "14 - Article Recommendations for Tickets (KB + LLM Rerank)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "support/ticket/recommend-articles",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "1",
      "name": "Webhook - Ticket Text",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-1060, 20]
    },
    {
      "parameters": {
        "assignments": {
          "mode": "auto",
          "assignments": [
            { "id": "ticketId", "name": "ticketId", "type": "string", "value": "={{$json.ticketId || ''}}" },
            { "id": "text", "name": "text", "type": "string", "value": "={{$json.text || ''}}" },
            { "id": "topK", "name": "topK", "type": "number", "value": "={{$json.topK || 3}}" }
          ]
        }
      },
      "id": "2",
      "name": "Normalize",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-820, 20]
    },
    {
      "parameters": {
        "url": "={{$env.KB_SEARCH_URL}}",
        "requestMethod": "GET",
        "jsonParameters": false,
        "sendBinaryData": false,
        "queryParametersUi": {
          "parameter": [
            { "name": "q", "value": "={{$json.text}}" },
            { "name": "limit", "value": "={{Math.max(10, Number($json.topK || 3)*3)}}" }
          ]
        },
        "headerParametersJson": "={{ $env.KB_API_KEY ? { 'Authorization': 'Bearer ' + $env.KB_API_KEY } : {} }}"
      },
      "id": "3",
      "name": "KB Search",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-580, 20]
    },
    {
      "parameters": {
        "functionCode": "const raw = $json;\nlet list = [];\nif (Array.isArray(raw)) list = raw; else if (Array.isArray(raw.results)) list = raw.results;\nconst items = list.map(a => ({ id: a.id || a.article_id || '', title: a.title || '', url: a.url || '', snippet: (a.content || a.snippet || '').slice(0, 600) }));\nreturn [{ candidates: items }];"
      },
      "id": "4",
      "name": "Normalize Candidates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-340, 20]
    },
    {
      "parameters": {
        "functionCode": "const cands = $json.candidates || [];\nconst sys = 'Given a support ticket and candidate articles, select topK best matches. Output JSON {recommendations:[{id,title,url,reason}]}. Avoid hallucinationsâ€”only choose from candidates.';\nconst user = JSON.stringify({ ticket: $items(0).item.json.text, topK: Number($items(0).item.json.topK||3), candidates: cands });\nreturn [{ payload: { model: $env.OPENAI_MODEL || 'gpt-4o-mini', temperature: 0.1, response_format: {type:'json_object'}, messages: [ {role:'system', content: sys}, {role:'user', content: user} ] } }];"
      },
      "id": "5",
      "name": "Build LLM Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-100, 20]
    },
    {
      "parameters": {
        "url": "={{$env.OPENAI_BASE_URL || 'https://api.openai.com/v1/chat/completions'}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ { 'Authorization': 'Bearer ' + $env.OPENAI_API_KEY, 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ $json.payload }}"
      },
      "id": "6",
      "name": "OpenAI - Rerank",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [140, 20]
    },
    {
      "parameters": {
        "functionCode": "let c = $json.choices?.[0]?.message?.content || '{}';\nlet parsed; try { parsed = JSON.parse(c); } catch(e){ parsed = { recommendations: [] }; }\nreturn [parsed];"
      },
      "id": "7",
      "name": "Parse JSON",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [380, 20]
    },
    {
      "parameters": {
        "url": "={{$env.TICKETING_WEBHOOK_URL || ''}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { 'Content-Type': 'application/json' } : {} }}",
        "bodyParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { action: 'attach_recommendations', ticketId: $items(0).item.json.ticketId, recommendations: $json.recommendations } : {} }}"
      },
      "id": "8",
      "name": "Attach to Ticket (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [620, -100]
    },
    {
      "parameters": {
        "responseCode": 200,
        "responseBody": "={{ $json }}"
      },
      "id": "9",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [620, 140]
    }
  ],
  "connections": {
    "Webhook - Ticket Text": { "main": [[{ "node": "Normalize", "type": "main", "index": 0 }]] },
    "Normalize": { "main": [[{ "node": "KB Search", "type": "main", "index": 0 }]] },
    "KB Search": { "main": [[{ "node": "Normalize Candidates", "type": "main", "index": 0 }]] },
    "Normalize Candidates": { "main": [[{ "node": "Build LLM Payload", "type": "main", "index": 0 }]] },
    "Build LLM Payload": { "main": [[{ "node": "OpenAI - Rerank", "type": "main", "index": 0 }]] },
    "OpenAI - Rerank": { "main": [[{ "node": "Parse JSON", "type": "main", "index": 0 }]] },
    "Parse JSON": {
      "main": [
        [{ "node": "Attach to Ticket (optional)", "type": "main", "index": 0 }],
        [{ "node": "Respond", "type": "main", "index": 0 }]
      ]
    },
    "Attach to Ticket (optional)": { "main": [[{ "node": "Respond", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "id": "14-support-article-recommendations"
}