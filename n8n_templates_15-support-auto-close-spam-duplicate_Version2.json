{
  "name": "15 - Auto-Close Spam/Duplicates (LLM Classification + Ticket Action)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "support/ticket/triage",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "1",
      "name": "Webhook - Ticket Triage",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [-1000, 20]
    },
    {
      "parameters": {
        "assignments": {
          "mode": "auto",
          "assignments": [
            { "id": "ticketId", "name": "ticketId", "type": "string", "value": "={{$json.ticketId || ''}}" },
            { "id": "title", "name": "title", "type": "string", "value": "={{$json.title || ''}}" },
            { "id": "body", "name": "body", "type": "string", "value": "={{$json.body || ''}}" },
            { "id": "relatedTicketIds", "name": "relatedTicketIds", "type": "json", "value": "={{$json.relatedTicketIds || []}}" },
            { "id": "confidenceThreshold", "name": "confidenceThreshold", "type": "number", "value": "={{$json.confidenceThreshold || Number($env.TRIAGE_CONFIDENCE_THRESHOLD || 0.85)}}" }
          ]
        }
      },
      "id": "2",
      "name": "Normalize",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [-760, 20]
    },
    {
      "parameters": {
        "functionCode": "const sys = 'Classify support tickets. Output JSON {action, confidence, reason, master_ticket_id?}. Actions: keep_open, close_spam, merge_duplicate.';\nconst user = JSON.stringify({ title: $json.title, body: $json.body, relatedTicketIds: $json.relatedTicketIds });\nreturn [{ payload: { model: $env.OPENAI_MODEL || 'gpt-4o-mini', temperature: 0, response_format: {type:'json_object'}, messages: [ {role:'system', content: sys}, {role:'user', content: user} ] } }];"
      },
      "id": "3",
      "name": "Build LLM Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-520, 20]
    },
    {
      "parameters": {
        "url": "={{$env.OPENAI_BASE_URL || 'https://api.openai.com/v1/chat/completions'}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ { 'Authorization': 'Bearer ' + $env.OPENAI_API_KEY, 'Content-Type': 'application/json' } }}",
        "bodyParametersJson": "={{ $json.payload }}"
      },
      "id": "4",
      "name": "OpenAI - Classify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [-280, 20]
    },
    {
      "parameters": {
        "functionCode": "let c = $json.choices?.[0]?.message?.content || '{}';\nlet parsed; try { parsed = JSON.parse(c); } catch(e) { parsed = { action:'keep_open', confidence: 0, reason:'parse_error' }; }\nconst conf = Number(parsed.confidence || 0);\nconst threshold = Number($items(0).item.json.confidenceThreshold || 0.85);\nconst action = conf >= threshold ? parsed.action : 'keep_open';\nreturn [{ action, confidence: conf, reason: parsed.reason || '', master_ticket_id: parsed.master_ticket_id || '' }];"
      },
      "id": "5",
      "name": "Parse & Gate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-40, 20]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            { "value1": "={{$json.action}}", "operation": "equal", "value2": "close_spam" }
          ]
        }
      },
      "id": "6",
      "name": "IF Close Spam",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [200, -80]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            { "value1": "={{$json.action}}", "operation": "equal", "value2": "merge_duplicate" }
          ]
        }
      },
      "id": "7",
      "name": "IF Merge Duplicate",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [200, 120]
    },
    {
      "parameters": {
        "url": "={{$env.TICKETING_WEBHOOK_URL || ''}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { 'Content-Type': 'application/json' } : {} }}",
        "bodyParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { action: 'close_ticket', ticketId: $items(0).item.json.ticketId, reason: $json.reason } : {} }}"
      },
      "id": "8",
      "name": "Close Ticket (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [440, -160]
    },
    {
      "parameters": {
        "url": "={{$env.TICKETING_WEBHOOK_URL || ''}}",
        "requestMethod": "POST",
        "jsonParameters": true,
        "sendBinaryData": false,
        "headerParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { 'Content-Type': 'application/json' } : {} }}",
        "bodyParametersJson": "={{ $env.TICKETING_WEBHOOK_URL ? { action: 'merge_ticket', ticketId: $items(0).item.json.ticketId, master_ticket_id: $json.master_ticket_id, reason: $json.reason } : {} }}"
      },
      "id": "9",
      "name": "Merge Ticket (optional)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [440, 40]
    },
    {
      "parameters": {
        "responseCode": 200,
        "responseBody": "={{ { ticketId: $items(0).item.json.ticketId, action: $json.action, confidence: $json.confidence, reason: $json.reason } }}"
      },
      "id": "10",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 20]
    }
  ],
  "connections": {
    "Webhook - Ticket Triage": { "main": [[{ "node": "Normalize", "type": "main", "index": 0 }]] },
    "Normalize": { "main": [[{ "node": "Build LLM Payload", "type": "main", "index": 0 }]] },
    "Build LLM Payload": { "main": [[{ "node": "OpenAI - Classify", "type": "main", "index": 0 }]] },
    "OpenAI - Classify": { "main": [[{ "node": "Parse & Gate", "type": "main", "index": 0 }]] },
    "Parse & Gate": {
      "main": [
        [{ "node": "IF Close Spam", "type": "main", "index": 0 }],
        [{ "node": "IF Merge Duplicate", "type": "main", "index": 0 }],
        [{ "node": "Respond", "type": "main", "index": 0 }]
      ]
    },
    "IF Close Spam": { "main": [[{ "node": "Close Ticket (optional)", "type": "main", "index": 0 }]] },
    "IF Merge Duplicate": { "main": [[{ "node": "Merge Ticket (optional)", "type": "main", "index": 0 }]] },
    "Close Ticket (optional)": { "main": [[{ "node": "Respond", "type": "main", "index": 0 }]] },
    "Merge Ticket (optional)": { "main": [[{ "node": "Respond", "type": "main", "index": 0 }]] }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "id": "15-support-auto-close-spam-duplicate"
}